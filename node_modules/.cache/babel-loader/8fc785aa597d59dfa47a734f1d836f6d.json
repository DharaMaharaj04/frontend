{"ast":null,"code":"var _jsxFileName = \"D:\\\\dental-dashboard\\\\src\\\\ui\\\\color-picker\\\\ColorPicker.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { SketchPicker } from 'react-color';\nimport PickerField from './picker-field/PickerFileld';\nimport ColorUtils from '../../utils/color-utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getContrast = hexColor => {\n  if (!hexColor) {\n    return null;\n  }\n\n  const [r, g, b] = ColorUtils.hexToRgb(hexColor);\n  return ColorUtils.checkContrastColor(r, g, b);\n};\n\nconst getColor = hexColor => ({\n  color: hexColor,\n  contrast: getContrast(hexColor)\n});\n\nconst ColorPicker = _ref => {\n  _s();\n\n  let {\n    opened: pickerOpened,\n    color,\n    onColorChange\n  } = _ref;\n  const [opened, setOpened] = useState(pickerOpened);\n\n  const handleColorChange = color => onColorChange(getColor(color.hex));\n\n  const handlePickerOpen = () => setOpened(true);\n\n  const handleClose = () => setOpened(false);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PickerField, {\n      savedColor: color,\n      onOpenPicker: handlePickerOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), opened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"picker-cover\",\n        onClick: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SketchPicker, {\n        onChangeComplete: handleColorChange,\n        color: color,\n        presetColors: [],\n        disableAlpha: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(ColorPicker, \"fmSSkMENVlpAR37KBbrD2XkKGlM=\");\n\n_c = ColorPicker;\nexport default ColorPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorPicker\");","map":{"version":3,"sources":["D:/dental-dashboard/src/ui/color-picker/ColorPicker.tsx"],"names":["React","useState","SketchPicker","PickerField","ColorUtils","getContrast","hexColor","r","g","b","hexToRgb","checkContrastColor","getColor","color","contrast","ColorPicker","opened","pickerOpened","onColorChange","setOpened","handleColorChange","hex","handlePickerOpen","handleClose"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;;AAOA,MAAMC,WAAW,GAAIC,QAAD,IAAsB;AACxC,MAAI,CAACA,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,QAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,UAAU,CAACM,QAAX,CAAoBJ,QAApB,CAAlB;AACA,SAAOF,UAAU,CAACO,kBAAX,CAA8BJ,CAA9B,EAAiCC,CAAjC,EAAoCC,CAApC,CAAP;AACD,CAPD;;AASA,MAAMG,QAAQ,GAAIN,QAAD,KAAoC;AACnDO,EAAAA,KAAK,EAAEP,QAD4C;AAEnDQ,EAAAA,QAAQ,EAAET,WAAW,CAACC,QAAD;AAF8B,CAApC,CAAjB;;AAYA,MAAMS,WAAW,GAAG,QAA2D;AAAA;;AAAA,MAA1D;AAAEC,IAAAA,MAAM,EAAEC,YAAV;AAAwBJ,IAAAA,KAAxB;AAA+BK,IAAAA;AAA/B,GAA0D;AAC7E,QAAM,CAACF,MAAD,EAASG,SAAT,IAAsBlB,QAAQ,CAAUgB,YAAV,CAApC;;AAEA,QAAMG,iBAAiB,GAAGP,KAAK,IAAIK,aAAa,CAACN,QAAQ,CAACC,KAAK,CAACQ,GAAP,CAAT,CAAhD;;AAEA,QAAMC,gBAAgB,GAAG,MAAMH,SAAS,CAAC,IAAD,CAAxC;;AAEA,QAAMI,WAAW,GAAG,MAAMJ,SAAS,CAAC,KAAD,CAAnC;;AAEA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,UAAU,EAAEN,KAAzB;AAAgC,MAAA,YAAY,EAAES;AAA9C;AAAA;AAAA;AAAA;AAAA,YADF,EAGGN,MAAM,iBACL;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,OAAO,EAAEO;AAAvC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AACE,QAAA,gBAAgB,EAAEH,iBADpB;AAEE,QAAA,KAAK,EAAEP,KAFT;AAGE,QAAA,YAAY,EAAE,EAHhB;AAIE,QAAA,YAAY;AAJd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBAJJ;AAAA,kBADF;AAiBD,CA1BD;;GAAME,W;;KAAAA,W;AA4BN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nimport PickerField from './picker-field/PickerFileld';\r\nimport ColorUtils from '../../utils/color-utils';\r\n\r\nexport type PickerColor = {\r\n  color: string;\r\n  contrast: string;\r\n};\r\n\r\nconst getContrast = (hexColor: string) => {\r\n  if (!hexColor) {\r\n    return null;\r\n  }\r\n\r\n  const [r, g, b] = ColorUtils.hexToRgb(hexColor);\r\n  return ColorUtils.checkContrastColor(r, g, b);\r\n};\r\n\r\nconst getColor = (hexColor: string): PickerColor => ({\r\n  color: hexColor,\r\n  contrast: getContrast(hexColor)\r\n});\r\n\r\ntype Props = {\r\n  color?: string;\r\n  secondColor?: string;\r\n  opened?: boolean;\r\n  onColorChange?: (color: PickerColor) => void;\r\n};\r\n\r\nconst ColorPicker = ({ opened: pickerOpened, color, onColorChange }: Props) => {\r\n  const [opened, setOpened] = useState<boolean>(pickerOpened);\r\n\r\n  const handleColorChange = color => onColorChange(getColor(color.hex));\r\n\r\n  const handlePickerOpen = () => setOpened(true);\r\n\r\n  const handleClose = () => setOpened(false);\r\n\r\n  return (\r\n    <>\r\n      <PickerField savedColor={color} onOpenPicker={handlePickerOpen} />\r\n\r\n      {opened && (\r\n        <>\r\n          <div className='picker-cover' onClick={handleClose} />\r\n          <SketchPicker\r\n            onChangeComplete={handleColorChange}\r\n            color={color}\r\n            presetColors={[]}\r\n            disableAlpha\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n"]},"metadata":{},"sourceType":"module"}