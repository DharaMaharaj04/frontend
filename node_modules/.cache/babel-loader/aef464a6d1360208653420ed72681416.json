{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\n\nvar _jsxFileName = \"D:\\\\dental-dashboard\\\\src\\\\pages\\\\tables\\\\FilterReset.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park'\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park'\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park'\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park'\n}];\n\nconst FilterReset = () => {\n  _s();\n\n  const [filters, setFilters] = useState({});\n  const [sortedInfo, setSorters] = useState({});\n\n  const handleChange = (pagination, filters, sorter) => {\n    setFilters(filters);\n    setSorters(sorter);\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n  };\n\n  const clearAll = () => {\n    setSorters({});\n    setFilters({});\n  };\n\n  const setAgeSort = () => {\n    setSorters({\n      order: 'descend',\n      columnKey: 'age'\n    });\n  };\n\n  const columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    filters: [{\n      text: 'Joe',\n      value: 'Joe'\n    }, {\n      text: 'Jim',\n      value: 'Jim'\n    }],\n    filteredValue: filters.name || null,\n    onFilter: (value, record) => record.name.includes(value),\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order\n  }, {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n    sorter: (a, b) => a.age - b.age,\n    sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order\n  }, {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    filters: [{\n      text: 'London',\n      value: 'London'\n    }, {\n      text: 'New York',\n      value: 'New York'\n    }],\n    filteredValue: filters.address || null,\n    onFilter: (value, record) => record.address.includes(value),\n    sorter: (a, b) => a.address.length - b.address.length,\n    sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"elem-list mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(_Button, {\n        onClick: setAgeSort,\n        children: \"Sort age\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Button, {\n        onClick: clearFilters,\n        children: \"Clear filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Button, {\n        onClick: clearAll,\n        children: \"Clear filters and sorters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Table, {\n      pagination: false,\n      columns: columns,\n      dataSource: data,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FilterReset, \"J1NgPL4bqWHDoMkHgkjKKarIOIk=\");\n\n_c = FilterReset;\nexport default FilterReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterReset\");","map":{"version":3,"sources":["D:/dental-dashboard/src/pages/tables/FilterReset.tsx"],"names":["React","useState","data","key","name","age","address","FilterReset","filters","setFilters","sortedInfo","setSorters","handleChange","pagination","sorter","clearFilters","clearAll","setAgeSort","order","columnKey","columns","title","dataIndex","text","value","filteredValue","onFilter","record","includes","a","b","length","sortOrder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Table } from 'antd';\r\n\r\nconst data = [\r\n  {\r\n    key: '1',\r\n    name: 'John Brown',\r\n    age: 32,\r\n    address: 'New York No. 1 Lake Park'\r\n  },\r\n  {\r\n    key: '2',\r\n    name: 'Jim Green',\r\n    age: 42,\r\n    address: 'London No. 1 Lake Park'\r\n  },\r\n  {\r\n    key: '3',\r\n    name: 'Joe Black',\r\n    age: 32,\r\n    address: 'Sidney No. 1 Lake Park'\r\n  },\r\n  {\r\n    key: '4',\r\n    name: 'Jim Red',\r\n    age: 32,\r\n    address: 'London No. 2 Lake Park'\r\n  }\r\n];\r\n\r\nconst FilterReset = () => {\r\n  const [filters, setFilters] = useState<any>({});\r\n  const [sortedInfo, setSorters] = useState<any>({});\r\n\r\n  const handleChange = (pagination, filters, sorter) => {\r\n    setFilters(filters);\r\n    setSorters(sorter);\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setFilters({});\r\n  };\r\n\r\n  const clearAll = () => {\r\n    setSorters({});\r\n    setFilters({});\r\n  };\r\n\r\n  const setAgeSort = () => {\r\n    setSorters({\r\n      order: 'descend',\r\n      columnKey: 'age'\r\n    });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      filters: [{ text: 'Joe', value: 'Joe' }, { text: 'Jim', value: 'Jim' }],\r\n      filteredValue: filters.name || null,\r\n      onFilter: (value, record) => record.name.includes(value),\r\n      sorter: (a, b) => a.name.length - b.name.length,\r\n      sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order\r\n    },\r\n    {\r\n      title: 'Age',\r\n      dataIndex: 'age',\r\n      key: 'age',\r\n      sorter: (a, b) => a.age - b.age,\r\n      sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order\r\n    },\r\n    {\r\n      title: 'Address',\r\n      dataIndex: 'address',\r\n      key: 'address',\r\n      filters: [{ text: 'London', value: 'London' }, { text: 'New York', value: 'New York' }],\r\n      filteredValue: filters.address || null,\r\n      onFilter: (value, record) => record.address.includes(value),\r\n      sorter: (a, b) => a.address.length - b.address.length,\r\n      sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div className='elem-list mb-4'>\r\n        <Button onClick={setAgeSort}>Sort age</Button>\r\n        <Button onClick={clearFilters}>Clear filters</Button>\r\n        <Button onClick={clearAll}>Clear filters and sorters</Button>\r\n      </div>\r\n      <Table pagination={false} columns={columns} dataSource={data} onChange={handleChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterReset;\r\n"]},"metadata":{},"sourceType":"module"}