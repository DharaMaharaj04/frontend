{"ast":null,"code":"var _jsxFileName = \"D:\\\\dental-dashboard\\\\src\\\\pages\\\\charts\\\\recharts\\\\charts\\\\PercentAreaChart.tsx\";\nimport React from 'react';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  month: '2015.01',\n  a: 4000,\n  b: 2400,\n  c: 2400\n}, {\n  month: '2015.02',\n  a: 3000,\n  b: 1398,\n  c: 2210\n}, {\n  month: '2015.03',\n  a: 2000,\n  b: 9800,\n  c: 2290\n}, {\n  month: '2015.04',\n  a: 2780,\n  b: 3908,\n  c: 2000\n}, {\n  month: '2015.05',\n  a: 1890,\n  b: 4800,\n  c: 2181\n}, {\n  month: '2015.06',\n  a: 2390,\n  b: 3800,\n  c: 2500\n}, {\n  month: '2015.07',\n  a: 3490,\n  b: 4300,\n  c: 2100\n}];\n\nconst getPercent = (value, total) => {\n  const ratio = total > 0 ? value / total : 0;\n  return toPercent(ratio, 2);\n};\n\nconst toPercent = function (decimal) {\n  let fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return `${(decimal * 100).toFixed(fixed)}%`;\n};\n\nconst renderTooltipContent = o => {\n  const {\n    payload,\n    label\n  } = o;\n  const total = payload.reduce((result, entry) => result + entry.value, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customized-tooltip-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"total\",\n      children: `${label} (Total: ${total})`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list\",\n      children: payload.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          color: entry.color\n        },\n        children: `${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`\n      }, `item-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\nconst PercentAreaChart = () => {\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    height: 300,\n    width: '100%',\n    children: /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 500,\n      height: 400,\n      data: data,\n      stackOffset: \"expand\",\n      margin: {\n        top: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        tickFormatter: toPercent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: renderTooltipContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"a\",\n        stackId: \"1\",\n        stroke: \"#8884d8\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"b\",\n        stackId: \"1\",\n        stroke: \"#82ca9d\",\n        fill: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"c\",\n        stackId: \"1\",\n        stroke: \"#ffc658\",\n        fill: \"#ffc658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PercentAreaChart;\nexport default PercentAreaChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PercentAreaChart\");","map":{"version":3,"sources":["D:/dental-dashboard/src/pages/charts/recharts/charts/PercentAreaChart.tsx"],"names":["React","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","data","month","a","b","c","getPercent","value","total","ratio","toPercent","decimal","fixed","toFixed","renderTooltipContent","o","payload","label","reduce","result","entry","map","index","color","name","PercentAreaChart","top"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {\r\n    month: '2015.01',\r\n    a: 4000,\r\n    b: 2400,\r\n    c: 2400\r\n  },\r\n  {\r\n    month: '2015.02',\r\n    a: 3000,\r\n    b: 1398,\r\n    c: 2210\r\n  },\r\n  {\r\n    month: '2015.03',\r\n    a: 2000,\r\n    b: 9800,\r\n    c: 2290\r\n  },\r\n  {\r\n    month: '2015.04',\r\n    a: 2780,\r\n    b: 3908,\r\n    c: 2000\r\n  },\r\n  {\r\n    month: '2015.05',\r\n    a: 1890,\r\n    b: 4800,\r\n    c: 2181\r\n  },\r\n  {\r\n    month: '2015.06',\r\n    a: 2390,\r\n    b: 3800,\r\n    c: 2500\r\n  },\r\n  {\r\n    month: '2015.07',\r\n    a: 3490,\r\n    b: 4300,\r\n    c: 2100\r\n  }\r\n];\r\nconst getPercent = (value, total) => {\r\n  const ratio = total > 0 ? value / total : 0;\r\n\r\n  return toPercent(ratio, 2);\r\n};\r\n\r\nconst toPercent = (decimal, fixed = 0) => `${(decimal * 100).toFixed(fixed)}%`;\r\nconst renderTooltipContent = o => {\r\n  const { payload, label } = o;\r\n  const total = payload.reduce((result, entry) => result + entry.value, 0);\r\n\r\n  return (\r\n    <div className='customized-tooltip-content'>\r\n      <p className='total'>{`${label} (Total: ${total})`}</p>\r\n      <ul className='list'>\r\n        {payload.map((entry, index) => (\r\n          <li key={`item-${index}`} style={{ color: entry.color }}>\r\n            {`${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PercentAreaChart = () => {\r\n  return (\r\n    <ResponsiveContainer height={300} width={'100%'}>\r\n      <AreaChart\r\n        width={500}\r\n        height={400}\r\n        data={data}\r\n        stackOffset='expand'\r\n        margin={{\r\n          top: 10\r\n        }}>\r\n        <CartesianGrid strokeDasharray='3 3' />\r\n        <XAxis dataKey='month' />\r\n        <YAxis tickFormatter={toPercent} />\r\n        <Tooltip content={renderTooltipContent} />\r\n        <Area type='monotone' dataKey='a' stackId='1' stroke='#8884d8' fill='#8884d8' />\r\n        <Area type='monotone' dataKey='b' stackId='1' stroke='#82ca9d' fill='#82ca9d' />\r\n        <Area type='monotone' dataKey='c' stackId='1' stroke='#ffc658' fill='#ffc658' />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default PercentAreaChart;\r\n"]},"metadata":{},"sourceType":"module"}